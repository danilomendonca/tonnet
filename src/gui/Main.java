
package gui;

//import com.jgoodies.looks.plastic.Plastic3DLookAndFeel;
//import com.jgoodies.looks.plastic.PlasticLookAndFeel;
//import com.jgoodies.looks.plastic.theme.*;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Enumeration;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import measurement.Measurements;
import messages.Messages;
import network.Mesh;
import network.Node;
import network.Pair;
import org.jdesktop.swingx.JXMapKit;
import org.jdesktop.swingx.JXMapKit.DefaultProviders;
import org.jdesktop.swingx.mapviewer.GeoPosition;
import root.NodeFileController;
import root.SimulationFileController;
import simulator.RandGenerator;
import simulator.Simulation;
import simulator.SimulationManagement;
import tools.Modelator;
import tools.RingModel;
import traffic.FuzzyClassification;

public class Main extends javax.swing.JFrame {

    private boolean saudacao = true;
    
    /** Creates new form Main */
    public Main() {
        messages = new Messages("messages");
        initComponents();
        try {
            initOtherComponents();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupTipoTrafego = new javax.swing.ButtonGroup();
        buttonGroupTrafNaoUnirforme = new javax.swing.ButtonGroup();
        buttonGroupSobrevivencia = new javax.swing.ButtonGroup();
        buttonGroupArqtConversao = new javax.swing.ButtonGroup();
        buttonGroupTabGraf = new javax.swing.ButtonGroup();
        jTabbedPaneTelas = new javax.swing.JTabbedPane();
        jPanelTopologia = new javax.swing.JPanel();
        jPanelFerramentas = new javax.swing.JPanel();
        jToggleButtonMover = new javax.swing.JToggleButton();
        jToggleButtonNo = new javax.swing.JToggleButton();
        jToggleButtonLink = new javax.swing.JToggleButton();
        jToggleButtonDelete = new javax.swing.JToggleButton();
        jToggleButtonMapActive = new javax.swing.JToggleButton();
        jToggleButtonMapLock = new javax.swing.JToggleButton();
        jToggleButtonMap = new javax.swing.JToggleButton();
        jPanelDesenho = new javax.swing.JPanel();
        jPanelDesenhoTop = new javax.swing.JPanel();
        jScrollPaneTopologia = new javax.swing.JScrollPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jToggleButtonTopology1 = new javax.swing.JToggleButton();
        jToggleButtonTopology2 = new javax.swing.JToggleButton();
        jToggleButtonTopology3 = new javax.swing.JToggleButton();
        jToggleButtonTopology4 = new javax.swing.JToggleButton();
        jPanelTrafego = new javax.swing.JPanel();
        jPanelEsq = new javax.swing.JPanel();
        jLabelIntensInicial = new javax.swing.JLabel();
        jLabelIncremento = new javax.swing.JLabel();
        jTextFieldintensInicial = new javax.swing.JTextField();
        jTextFieldIncremento = new javax.swing.JTextField();
        jRadioButtonUniforme = new javax.swing.JRadioButton();
        jRadioButtonNaoUniforme = new javax.swing.JRadioButton();
        jLabelGerTrafego = new javax.swing.JLabel();
        jRadioButtonTNUPar = new javax.swing.JRadioButton();
        jRadioButtonTNUNo = new javax.swing.JRadioButton();
        jScrollPaneTrafego = new javax.swing.JScrollPane();
        jTextAreaTrafego = new javax.swing.JTextArea();
        jLabelIncremento1 = new javax.swing.JLabel();
        jComboBoxSwitchingType = new javax.swing.JComboBox();
        jSliderTrafficSample = new javax.swing.JSlider();
        jLabelIncremento2 = new javax.swing.JLabel();
        jLabelIncremento3 = new javax.swing.JLabel();
        jLabelIncremento4 = new javax.swing.JLabel();
        jSliderTrafficMaxHolder = new javax.swing.JSlider();
        jTextFieldHurstMin = new javax.swing.JTextField();
        jLabelIncremento5 = new javax.swing.JLabel();
        jTextFieldHurstMax = new javax.swing.JTextField();
        jPanelDir = new javax.swing.JPanel();
        jScrollPaneTrafegoPar = new javax.swing.JScrollPane();
        jTableTrafegoPar = new javax.swing.JTable();
        jPanelRWASobrevivencia = new javax.swing.JPanel();
        jPanelAlgoritmosWA = new javax.swing.JPanel();
        jLabelAlgoritmo = new javax.swing.JLabel();
        jComboBoxAlgosWA = new javax.swing.JComboBox();
        jLabelAlgoWA = new javax.swing.JLabel();
        jLabelRoteamento = new javax.swing.JLabel();
        jPanelRoteamento = new javax.swing.JPanel();
        jLabelTipoRoteamento = new javax.swing.JLabel();
        jComboBoxRoteamento = new javax.swing.JComboBox();
        jCheckBoxSobrevivencia = new javax.swing.JCheckBox();
        jPanelSobrevivencia = new javax.swing.JPanel();
        jRadioButtonProtecao = new javax.swing.JRadioButton();
        jRadioButtonRestauracao = new javax.swing.JRadioButton();
        jRadioButtonAdaptive = new javax.swing.JRadioButton();
        jComboBoxSobrevivencia = new javax.swing.JComboBox();
        jPanelConversores = new javax.swing.JPanel();
        jLabelArqtConversao = new javax.swing.JLabel();
        jPanelArqtConversao = new javax.swing.JPanel();
        jRadioButtonSemConversao = new javax.swing.JRadioButton();
        jRadioButtonConversaoP = new javax.swing.JRadioButton();
        jRadioButtonConversaoE = new javax.swing.JRadioButton();
        jRadioButtonConversaoEP = new javax.swing.JRadioButton();
        jRadioButtonConversaoT = new javax.swing.JRadioButton();
        jPanelPosConversores = new javax.swing.JPanel();
        jComboBoxPosConversores = new javax.swing.JComboBox();
        jLabelPosConversores = new javax.swing.JLabel();
        jPanelParametrosSimulacao = new javax.swing.JPanel();
        jPanelParametrosSim = new javax.swing.JPanel();
        jLabelPontosCarga = new javax.swing.JLabel();
        jTextFieldPontosCarga = new javax.swing.JTextField();
        jLabelNumReq = new javax.swing.JLabel();
        jTextFieldNumReq = new javax.swing.JTextField();
        jLabelNumRep = new javax.swing.JLabel();
        jTextFieldNumRep = new javax.swing.JTextField();
        jLabelNivelConfianca = new javax.swing.JLabel();
        jSpinnerNivelConfianca = new javax.swing.JSpinner();
        jCheckBoxGerarFalhas = new javax.swing.JCheckBox();
        jPanelAgendaSimulacoes = new javax.swing.JPanel();
        jPanelAgenda = new javax.swing.JPanel();
        jLabelCenarios = new javax.swing.JLabel();
        jScrollPaneCenarios = new javax.swing.JScrollPane();
        jTextAreaCenarios = new javax.swing.JTextArea();
        jButtonAdicionarSim = new javax.swing.JButton();
        jButtonRemoveSim = new javax.swing.JButton();
        jButtonLimparSim = new javax.swing.JButton();
        jButtonIniciarAgenda = new javax.swing.JButton();
        jPanelResultados = new javax.swing.JPanel();
        jScrollPaneMetricas = new javax.swing.JScrollPane();
        jTreeMetricas = new javax.swing.JTree();
        jToggleButtonTab = new javax.swing.JToggleButton();
        jToggleButtonGraf = new javax.swing.JToggleButton();
        jBMaximizar = new javax.swing.JButton();
        jScrollPaneGraf = new javax.swing.JScrollPane();
        jPanelGraf = new javax.swing.JLayeredPane();
        jBLimparHistorico = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jPanelIniciarParar = new javax.swing.JPanel();
        jButtonIniciarSimulacao = new javax.swing.JButton();
        jButtonPararSimulacao = new javax.swing.JButton();
        jPanelGerarRelatorio = new javax.swing.JPanel();
        jButtonGerarGraficos = new javax.swing.JButton();
        jButtonGerarRelatorio = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jMenuItemSalvarComo = new javax.swing.JMenuItem();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuFerramentas = new javax.swing.JMenu();
        jMenuItemValidacao = new javax.swing.JMenuItem();
        jMenuAjuda = new javax.swing.JMenu();
        jMenuItemTopicosAjuda = new javax.swing.JMenuItem();
        jMenuItemSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TONetS v2.0");
        setName("tonets"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPaneTelas.setBackground(new java.awt.Color(255, 255, 255));

        jPanelTopologia.setAutoscrolls(true);

        jPanelFerramentas.setBackground(new java.awt.Color(211, 208, 205));
        jPanelFerramentas.setOpaque(false);

        jToggleButtonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/pointer.gif"))); // NOI18N
        jToggleButtonMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMoverActionPerformed(evt);
            }
        });

        jToggleButtonNo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/oxc.gif"))); // NOI18N
        jToggleButtonNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonNoActionPerformed(evt);
            }
        });

        jToggleButtonLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/link.gif"))); // NOI18N
        jToggleButtonLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonLinkActionPerformed(evt);
            }
        });

        jToggleButtonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/delete.gif"))); // NOI18N
        jToggleButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonDeleteActionPerformed(evt);
            }
        });

        jToggleButtonMapActive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/map-active.png"))); // NOI18N
        jToggleButtonMapActive.setSelected(true);
        jToggleButtonMapActive.setBorderPainted(false);
        jToggleButtonMapActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMapActiveActionPerformed(evt);
            }
        });

        jToggleButtonMapLock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/oxcLocked.gif"))); // NOI18N
        jToggleButtonMapLock.setSelected(true);
        jToggleButtonMapLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMapLockActionPerformed(evt);
            }
        });

        jToggleButtonMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/map.png"))); // NOI18N
        jToggleButtonMap.setSelected(true);
        jToggleButtonMap.setBorderPainted(false);
        jToggleButtonMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonMapActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelFerramentasLayout = new org.jdesktop.layout.GroupLayout(jPanelFerramentas);
        jPanelFerramentas.setLayout(jPanelFerramentasLayout);
        jPanelFerramentasLayout.setHorizontalGroup(
            jPanelFerramentasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFerramentasLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelFerramentasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jToggleButtonMover, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(jToggleButtonNo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(jToggleButtonLink, 0, 0, Short.MAX_VALUE)
                    .add(jToggleButtonDelete, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(jToggleButtonMapActive, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jToggleButtonMap, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jToggleButtonMapLock, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelFerramentasLayout.setVerticalGroup(
            jPanelFerramentasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelFerramentasLayout.createSequentialGroup()
                .addContainerGap()
                .add(jToggleButtonMover)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jToggleButtonNo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jToggleButtonLink)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jToggleButtonDelete)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jToggleButtonMapActive, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jToggleButtonMap, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jToggleButtonMapLock)
                .addContainerGap(316, Short.MAX_VALUE))
        );

        jPanelDesenho.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDesenho.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153))));
        jPanelDesenho.setToolTipText("área para desenho da topologia");
        jPanelDesenho.setAutoscrolls(true);
        jPanelDesenho.setPreferredSize(new java.awt.Dimension(788, 458));
        jPanelDesenho.setLayout(new java.awt.GridLayout(1, 1));

        jPanelDesenhoTop.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDesenhoTop.setAutoscrolls(true);
        jPanelDesenhoTop.setPreferredSize(new java.awt.Dimension(782, 552));
        jPanelDesenhoTop.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanelDesenhoTopComponentResized(evt);
            }
        });

        jScrollPaneTopologia.setAutoscrolls(true);

        jLayeredPane1.setPreferredSize(new java.awt.Dimension(782, 552));

        jToggleButtonTopology1.setText(messages.recuperarMsg("topology_1"));
        jToggleButtonTopology1.setMaximumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology1.setMinimumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology1.setPreferredSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTopology1ActionPerformed(evt);
            }
        });
        jToggleButtonTopology1.setBounds(10, 10, 119, 23);
        jLayeredPane1.add(jToggleButtonTopology1, javax.swing.JLayeredPane.POPUP_LAYER);

        jToggleButtonTopology2.setText(messages.recuperarMsg("topology_2"));
        jToggleButtonTopology2.setMaximumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology2.setMinimumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology2.setPreferredSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTopology2ActionPerformed(evt);
            }
        });
        jToggleButtonTopology2.setBounds(130, 10, 119, 23);
        jLayeredPane1.add(jToggleButtonTopology2, javax.swing.JLayeredPane.POPUP_LAYER);

        jToggleButtonTopology3.setText(messages.recuperarMsg("topology_3"));
        jToggleButtonTopology3.setMaximumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology3.setMinimumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology3.setPreferredSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTopology3ActionPerformed(evt);
            }
        });
        jToggleButtonTopology3.setBounds(250, 10, 119, 23);
        jLayeredPane1.add(jToggleButtonTopology3, javax.swing.JLayeredPane.POPUP_LAYER);

        jToggleButtonTopology4.setText(messages.recuperarMsg("topology_3"));
        jToggleButtonTopology4.setMaximumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology4.setMinimumSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology4.setPreferredSize(new java.awt.Dimension(57, 33));
        jToggleButtonTopology4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTopology4ActionPerformed(evt);
            }
        });
        jToggleButtonTopology4.setBounds(370, 10, 119, 23);
        jLayeredPane1.add(jToggleButtonTopology4, javax.swing.JLayeredPane.POPUP_LAYER);

        jScrollPaneTopologia.setViewportView(jLayeredPane1);

        org.jdesktop.layout.GroupLayout jPanelDesenhoTopLayout = new org.jdesktop.layout.GroupLayout(jPanelDesenhoTop);
        jPanelDesenhoTop.setLayout(jPanelDesenhoTopLayout);
        jPanelDesenhoTopLayout.setHorizontalGroup(
            jPanelDesenhoTopLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPaneTopologia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1092, Short.MAX_VALUE)
        );
        jPanelDesenhoTopLayout.setVerticalGroup(
            jPanelDesenhoTopLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPaneTopologia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );

        jPanelDesenho.add(jPanelDesenhoTop);

        org.jdesktop.layout.GroupLayout jPanelTopologiaLayout = new org.jdesktop.layout.GroupLayout(jPanelTopologia);
        jPanelTopologia.setLayout(jPanelTopologiaLayout);
        jPanelTopologiaLayout.setHorizontalGroup(
            jPanelTopologiaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelTopologiaLayout.createSequentialGroup()
                .add(jPanelFerramentas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelDesenho, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1096, Short.MAX_VALUE))
        );
        jPanelTopologiaLayout.setVerticalGroup(
            jPanelTopologiaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelDesenho, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
            .add(jPanelFerramentas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPaneTelas.addTab("Topologia", jPanelTopologia);

        jPanelTrafego.setBackground(new java.awt.Color(255, 255, 255));

        jPanelEsq.setBackground(new java.awt.Color(255, 255, 255));
        jPanelEsq.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabelIntensInicial.setText("Intensidade Inicial (E):");

        jLabelIncremento.setText("Incremento da Intensidade (E):");

        jTextFieldintensInicial.setText("0");
        jTextFieldintensInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldintensInicialActionPerformed(evt);
            }
        });

        jTextFieldIncremento.setText("0");

        buttonGroupTipoTrafego.add(jRadioButtonUniforme);
        jRadioButtonUniforme.setSelected(true);
        jRadioButtonUniforme.setText("Uniforme");
        jRadioButtonUniforme.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        buttonGroupTipoTrafego.add(jRadioButtonNaoUniforme);
        jRadioButtonNaoUniforme.setText("Não Uniforme");
        jRadioButtonNaoUniforme.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonNaoUniforme.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonNaoUniformeItemStateChanged(evt);
            }
        });

        jLabelGerTrafego.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGerTrafego.setText("Geração de Tráfego");

        buttonGroupTrafNaoUnirforme.add(jRadioButtonTNUPar);
        jRadioButtonTNUPar.setSelected(true);
        jRadioButtonTNUPar.setText("por Par");
        jRadioButtonTNUPar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonTNUPar.setEnabled(false);
        jRadioButtonTNUPar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTNUParItemStateChanged(evt);
            }
        });

        buttonGroupTrafNaoUnirforme.add(jRadioButtonTNUNo);
        jRadioButtonTNUNo.setText("por Nó");
        jRadioButtonTNUNo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonTNUNo.setEnabled(false);

        jTextAreaTrafego.setEditable(false);
        jTextAreaTrafego.setColumns(20);
        jTextAreaTrafego.setLineWrap(true);
        jTextAreaTrafego.setRows(5);
        jTextAreaTrafego.setText("Tráfego Uniforme.");
        jTextAreaTrafego.setWrapStyleWord(true);
        jScrollPaneTrafego.setViewportView(jTextAreaTrafego);

        jLabelIncremento1.setText("Comutação:");

        jComboBoxSwitchingType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Híbrido", "Rajada", "Circuito" }));
        jComboBoxSwitchingType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSwitchingTypeActionPerformed(evt);
            }
        });
        jComboBoxSwitchingType.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxSwitchingTypePropertyChange(evt);
            }
        });

        jSliderTrafficSample.setMajorTickSpacing(1);
        jSliderTrafficSample.setMinorTickSpacing(1);
        jSliderTrafficSample.setValue(10);
        jSliderTrafficSample.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTrafficSampleStateChanged(evt);
            }
        });

        jLabelIncremento2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelIncremento2.setText("Escala [0 - 1ms]:");

        jLabelIncremento3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelIncremento3.setText("Hurst Min [0 - 1]:");

        jLabelIncremento4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelIncremento4.setText("α max [0 - 10]:");

        jSliderTrafficMaxHolder.setMaximum(200);
        jSliderTrafficMaxHolder.setMinorTickSpacing(1);
        jSliderTrafficMaxHolder.setToolTipText("");
        jSliderTrafficMaxHolder.setValue(0);
        jSliderTrafficMaxHolder.setEnabled(false);

        jTextFieldHurstMin.setText("0");
        jTextFieldHurstMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHurstMinActionPerformed(evt);
            }
        });

        jLabelIncremento5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelIncremento5.setText("Hurst Max [0 - 1]:");

        jTextFieldHurstMax.setText("0");
        jTextFieldHurstMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHurstMaxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelEsqLayout = new org.jdesktop.layout.GroupLayout(jPanelEsq);
        jPanelEsq.setLayout(jPanelEsqLayout);
        jPanelEsqLayout.setHorizontalGroup(
            jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelEsqLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelEsqLayout.createSequentialGroup()
                        .add(jLabelIncremento3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(74, 74, 74)
                        .add(jTextFieldHurstMin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(jPanelEsqLayout.createSequentialGroup()
                        .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelEsqLayout.createSequentialGroup()
                                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabelIncremento)
                                    .add(jLabelIntensInicial))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jTextFieldIncremento, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .add(jTextFieldintensInicial)))
                            .add(jPanelEsqLayout.createSequentialGroup()
                                .add(jLabelIncremento1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBoxSwitchingType, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(jSliderTrafficSample, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelIncremento2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanelEsqLayout.createSequentialGroup()
                                .add(jLabelIncremento5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTextFieldHurstMax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelIncremento4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSliderTrafficMaxHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelEsqLayout.createSequentialGroup()
                        .add(jLabelGerTrafego, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(8, 8, 8))
                    .add(jPanelEsqLayout.createSequentialGroup()
                        .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jRadioButtonUniforme)
                            .add(jRadioButtonNaoUniforme)
                            .add(jPanelEsqLayout.createSequentialGroup()
                                .add(46, 46, 46)
                                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jRadioButtonTNUNo)
                                    .add(jRadioButtonTNUPar))))
                        .add(159, 159, 159))
                    .add(jScrollPaneTrafego)))
        );
        jPanelEsqLayout.setVerticalGroup(
            jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelEsqLayout.createSequentialGroup()
                .add(23, 23, 23)
                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldintensInicial, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelIntensInicial))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldIncremento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelIncremento))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelIncremento1)
                    .add(jComboBoxSwitchingType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelIncremento2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSliderTrafficSample, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelIncremento3)
                    .add(jPanelEsqLayout.createSequentialGroup()
                        .add(jTextFieldHurstMin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelEsqLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jTextFieldHurstMax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabelIncremento5))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelIncremento4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSliderTrafficMaxHolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelGerTrafego)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonUniforme)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonNaoUniforme)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonTNUPar)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonTNUNo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPaneTrafego, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jPanelDir.setBackground(new java.awt.Color(255, 255, 255));
        jPanelDir.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153))));

        jScrollPaneTrafegoPar.setBackground(new java.awt.Color(227, 241, 241));
        jScrollPaneTrafegoPar.setAutoscrolls(true);

        jTableTrafegoPar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Nó 1", "-", null, null, null},
                {"Nó 2", null, "-", null, null},
                {"Nó 3", null, null, "-", ""},
                {"Nó 4", null, null, null, "-"}
            },
            new String [] {
                "Nós", "Nó 1", "Nó 2", "Nó 3", "Nó 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableTrafegoPar.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableTrafegoPar.setMinimumSize(new java.awt.Dimension(200, 64));
        jScrollPaneTrafegoPar.setViewportView(jTableTrafegoPar);

        org.jdesktop.layout.GroupLayout jPanelDirLayout = new org.jdesktop.layout.GroupLayout(jPanelDir);
        jPanelDir.setLayout(jPanelDirLayout);
        jPanelDirLayout.setHorizontalGroup(
            jPanelDirLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelDirLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jScrollPaneTrafegoPar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 869, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanelDirLayout.setVerticalGroup(
            jPanelDirLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPaneTrafegoPar)
        );

        org.jdesktop.layout.GroupLayout jPanelTrafegoLayout = new org.jdesktop.layout.GroupLayout(jPanelTrafego);
        jPanelTrafego.setLayout(jPanelTrafegoLayout);
        jPanelTrafegoLayout.setHorizontalGroup(
            jPanelTrafegoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelTrafegoLayout.createSequentialGroup()
                .add(jPanelEsq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 848, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanelTrafegoLayout.setVerticalGroup(
            jPanelTrafegoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelEsq, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanelDir, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPaneTelas.addTab("Tráfego", jPanelTrafego);

        jPanelRWASobrevivencia.setBackground(new java.awt.Color(255, 255, 255));

        jPanelAlgoritmosWA.setBackground(new java.awt.Color(227, 241, 241));

        jLabelAlgoritmo.setText("Algoritmo :");

        jComboBoxAlgosWA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Fit", "Random", "Least Used", "Most Used", "Max Sum", "RCL" }));

        org.jdesktop.layout.GroupLayout jPanelAlgoritmosWALayout = new org.jdesktop.layout.GroupLayout(jPanelAlgoritmosWA);
        jPanelAlgoritmosWA.setLayout(jPanelAlgoritmosWALayout);
        jPanelAlgoritmosWALayout.setHorizontalGroup(
            jPanelAlgoritmosWALayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelAlgoritmosWALayout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jLabelAlgoritmo)
                .add(20, 20, 20)
                .add(jComboBoxAlgosWA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanelAlgoritmosWALayout.setVerticalGroup(
            jPanelAlgoritmosWALayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelAlgoritmosWALayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelAlgoritmosWALayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxAlgosWA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelAlgoritmo))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelAlgoWA.setText("Algoritmos de Alocação de Comprimetos de Onda");

        jLabelRoteamento.setText("Roteamento");

        jPanelRoteamento.setBackground(new java.awt.Color(227, 241, 241));

        jLabelTipoRoteamento.setText("Tipo de Roteamento :");

        jComboBoxRoteamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fixo - menor número de saltos", "Adaptativo -Least Load Routing" }));

        org.jdesktop.layout.GroupLayout jPanelRoteamentoLayout = new org.jdesktop.layout.GroupLayout(jPanelRoteamento);
        jPanelRoteamento.setLayout(jPanelRoteamentoLayout);
        jPanelRoteamentoLayout.setHorizontalGroup(
            jPanelRoteamentoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRoteamentoLayout.createSequentialGroup()
                .add(23, 23, 23)
                .add(jLabelTipoRoteamento)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBoxRoteamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanelRoteamentoLayout.setVerticalGroup(
            jPanelRoteamentoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRoteamentoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelRoteamentoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelTipoRoteamento)
                    .add(jComboBoxRoteamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBoxSobrevivencia.setText("Estrategia de Sobrevivência");
        jCheckBoxSobrevivencia.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSobrevivencia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxSobrevivenciaItemStateChanged(evt);
            }
        });

        jPanelSobrevivencia.setBackground(new java.awt.Color(227, 241, 241));

        jRadioButtonProtecao.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupSobrevivencia.add(jRadioButtonProtecao);
        jRadioButtonProtecao.setText("Proteção");
        jRadioButtonProtecao.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonProtecao.setEnabled(false);
        jRadioButtonProtecao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonProtecaoItemStateChanged(evt);
            }
        });

        jRadioButtonRestauracao.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupSobrevivencia.add(jRadioButtonRestauracao);
        jRadioButtonRestauracao.setText("Restauração");
        jRadioButtonRestauracao.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonRestauracao.setEnabled(false);
        jRadioButtonRestauracao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonRestauracaoItemStateChanged(evt);
            }
        });

        jRadioButtonAdaptive.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupSobrevivencia.add(jRadioButtonAdaptive);
        jRadioButtonAdaptive.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jRadioButtonAdaptive.setText("Adaptative");
        jRadioButtonAdaptive.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonAdaptive.setEnabled(false);
        jRadioButtonAdaptive.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAdaptiveItemStateChanged(evt);
            }
        });

        jComboBoxSobrevivencia.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jComboBoxSobrevivencia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Two Step", "Two Step com backtracking" }));
        jComboBoxSobrevivencia.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanelSobrevivenciaLayout = new org.jdesktop.layout.GroupLayout(jPanelSobrevivencia);
        jPanelSobrevivencia.setLayout(jPanelSobrevivenciaLayout);
        jPanelSobrevivenciaLayout.setHorizontalGroup(
            jPanelSobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelSobrevivenciaLayout.createSequentialGroup()
                .add(29, 29, 29)
                .add(jPanelSobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelSobrevivenciaLayout.createSequentialGroup()
                        .add(jRadioButtonProtecao)
                        .add(36, 36, 36)
                        .add(jRadioButtonRestauracao)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 39, Short.MAX_VALUE)
                        .add(jRadioButtonAdaptive))
                    .add(jComboBoxSobrevivencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 286, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(31, 31, 31))
        );
        jPanelSobrevivenciaLayout.setVerticalGroup(
            jPanelSobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelSobrevivenciaLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelSobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButtonProtecao)
                    .add(jRadioButtonAdaptive)
                    .add(jRadioButtonRestauracao))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBoxSobrevivencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanelRWASobrevivenciaLayout = new org.jdesktop.layout.GroupLayout(jPanelRWASobrevivencia);
        jPanelRWASobrevivencia.setLayout(jPanelRWASobrevivenciaLayout);
        jPanelRWASobrevivenciaLayout.setHorizontalGroup(
            jPanelRWASobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRWASobrevivenciaLayout.createSequentialGroup()
                .add(320, 320, 320)
                .add(jPanelRWASobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelRWASobrevivenciaLayout.createSequentialGroup()
                        .add(jPanelRWASobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelSobrevivencia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelAlgoritmosWA, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelRoteamento, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(151, 151, 151))
                    .add(jPanelRWASobrevivenciaLayout.createSequentialGroup()
                        .add(jPanelRWASobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jCheckBoxSobrevivencia)
                            .add(jLabelRoteamento)
                            .add(jLabelAlgoWA))
                        .addContainerGap())))
        );
        jPanelRWASobrevivenciaLayout.setVerticalGroup(
            jPanelRWASobrevivenciaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelRWASobrevivenciaLayout.createSequentialGroup()
                .add(50, 50, 50)
                .add(jLabelAlgoWA)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelAlgoritmosWA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelRoteamento)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelRoteamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxSobrevivencia)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelSobrevivencia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(342, Short.MAX_VALUE))
        );

        jTabbedPaneTelas.addTab("RWA e Sobrevivência", jPanelRWASobrevivencia);

        jPanelConversores.setBackground(new java.awt.Color(255, 255, 255));

        jLabelArqtConversao.setText("Arquitetura de Conversão");

        jPanelArqtConversao.setBackground(new java.awt.Color(227, 241, 241));

        jRadioButtonSemConversao.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupArqtConversao.add(jRadioButtonSemConversao);
        jRadioButtonSemConversao.setSelected(true);
        jRadioButtonSemConversao.setText("Sem Conversão");
        jRadioButtonSemConversao.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonSemConversao.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonSemConversaoStateChanged(evt);
            }
        });

        jRadioButtonConversaoP.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupArqtConversao.add(jRadioButtonConversaoP);
        jRadioButtonConversaoP.setText("Parcial");
        jRadioButtonConversaoP.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonConversaoP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonConversaoPStateChanged(evt);
            }
        });

        jRadioButtonConversaoE.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupArqtConversao.add(jRadioButtonConversaoE);
        jRadioButtonConversaoE.setText("Esparsa");
        jRadioButtonConversaoE.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonConversaoE.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonConversaoEStateChanged(evt);
            }
        });

        jRadioButtonConversaoEP.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupArqtConversao.add(jRadioButtonConversaoEP);
        jRadioButtonConversaoEP.setText("Esparsa - Parcial");
        jRadioButtonConversaoEP.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonConversaoEP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonConversaoEPStateChanged(evt);
            }
        });

        jRadioButtonConversaoT.setBackground(new java.awt.Color(227, 241, 241));
        buttonGroupArqtConversao.add(jRadioButtonConversaoT);
        jRadioButtonConversaoT.setText("Conversão Total");
        jRadioButtonConversaoT.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonConversaoT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonConversaoTStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelArqtConversaoLayout = new org.jdesktop.layout.GroupLayout(jPanelArqtConversao);
        jPanelArqtConversao.setLayout(jPanelArqtConversaoLayout);
        jPanelArqtConversaoLayout.setHorizontalGroup(
            jPanelArqtConversaoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelArqtConversaoLayout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jPanelArqtConversaoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jRadioButtonConversaoT)
                    .add(jRadioButtonConversaoEP)
                    .add(jRadioButtonConversaoE)
                    .add(jRadioButtonConversaoP)
                    .add(jRadioButtonSemConversao))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelArqtConversaoLayout.setVerticalGroup(
            jPanelArqtConversaoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelArqtConversaoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jRadioButtonSemConversao)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonConversaoP)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonConversaoE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonConversaoEP)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButtonConversaoT)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelPosConversores.setBackground(new java.awt.Color(227, 241, 241));

        jComboBoxPosConversores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TOT", "FLP", "Manual" }));
        jComboBoxPosConversores.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanelPosConversoresLayout = new org.jdesktop.layout.GroupLayout(jPanelPosConversores);
        jPanelPosConversores.setLayout(jPanelPosConversoresLayout);
        jPanelPosConversoresLayout.setHorizontalGroup(
            jPanelPosConversoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelPosConversoresLayout.createSequentialGroup()
                .addContainerGap()
                .add(jComboBoxPosConversores, 0, 263, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelPosConversoresLayout.setVerticalGroup(
            jPanelPosConversoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelPosConversoresLayout.createSequentialGroup()
                .addContainerGap()
                .add(jComboBoxPosConversores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelPosConversores.setText("Posicionamento de Conversores");

        org.jdesktop.layout.GroupLayout jPanelConversoresLayout = new org.jdesktop.layout.GroupLayout(jPanelConversores);
        jPanelConversores.setLayout(jPanelConversoresLayout);
        jPanelConversoresLayout.setHorizontalGroup(
            jPanelConversoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelConversoresLayout.createSequentialGroup()
                .add(332, 332, 332)
                .add(jPanelConversoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelConversoresLayout.createSequentialGroup()
                        .add(jPanelConversoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelArqtConversao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabelArqtConversao))
                        .add(275, 275, 275))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelConversoresLayout.createSequentialGroup()
                        .add(jLabelPosConversores)
                        .add(324, 324, 324))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelConversoresLayout.createSequentialGroup()
                        .add(jPanelPosConversores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(202, 202, 202)))
                .add(0, 307, Short.MAX_VALUE))
        );
        jPanelConversoresLayout.setVerticalGroup(
            jPanelConversoresLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelConversoresLayout.createSequentialGroup()
                .add(30, 30, 30)
                .add(jLabelArqtConversao)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelArqtConversao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(jLabelPosConversores)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelPosConversores, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(362, Short.MAX_VALUE))
        );

        jTabbedPaneTelas.addTab("Conversores", jPanelConversores);

        jPanelParametrosSimulacao.setBackground(new java.awt.Color(255, 255, 255));

        jPanelParametrosSim.setBackground(new java.awt.Color(227, 241, 241));

        jLabelPontosCarga.setText("Número de Pontos de Carga :");

        jTextFieldPontosCarga.setText("0");

        jLabelNumReq.setText("Número de Requisições :");

        jTextFieldNumReq.setText("0");

        jLabelNumRep.setText("Número de Replicações :");

        jTextFieldNumRep.setText("0");

        jLabelNivelConfianca.setText("Nivel de Confiança :");

        jCheckBoxGerarFalhas.setBackground(new java.awt.Color(227, 241, 241));
        jCheckBoxGerarFalhas.setText("Gerar Falhas");
        jCheckBoxGerarFalhas.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanelParametrosSimLayout = new org.jdesktop.layout.GroupLayout(jPanelParametrosSim);
        jPanelParametrosSim.setLayout(jPanelParametrosSimLayout);
        jPanelParametrosSimLayout.setHorizontalGroup(
            jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelParametrosSimLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabelNumRep)
                        .add(jLabelNumReq)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelNivelConfianca)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jCheckBoxGerarFalhas))
                    .add(jLabelPontosCarga))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSpinnerNivelConfianca, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .add(jTextFieldNumRep, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .add(jTextFieldNumReq, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .add(jTextFieldPontosCarga, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelParametrosSimLayout.setVerticalGroup(
            jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelParametrosSimLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldPontosCarga, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelPontosCarga))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldNumReq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelNumReq))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldNumRep, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelNumRep))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelParametrosSimLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jSpinnerNivelConfianca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelNivelConfianca))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                .add(jCheckBoxGerarFalhas)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanelParametrosSimulacaoLayout = new org.jdesktop.layout.GroupLayout(jPanelParametrosSimulacao);
        jPanelParametrosSimulacao.setLayout(jPanelParametrosSimulacaoLayout);
        jPanelParametrosSimulacaoLayout.setHorizontalGroup(
            jPanelParametrosSimulacaoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelParametrosSimulacaoLayout.createSequentialGroup()
                .add(355, 355, 355)
                .add(jPanelParametrosSim, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(537, Short.MAX_VALUE))
        );
        jPanelParametrosSimulacaoLayout.setVerticalGroup(
            jPanelParametrosSimulacaoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelParametrosSimulacaoLayout.createSequentialGroup()
                .add(48, 48, 48)
                .add(jPanelParametrosSim, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(421, Short.MAX_VALUE))
        );

        jTabbedPaneTelas.addTab("Parâmetros de Simulação", jPanelParametrosSimulacao);

        jPanelAgendaSimulacoes.setBackground(new java.awt.Color(255, 255, 255));

        jPanelAgenda.setBackground(new java.awt.Color(227, 241, 241));

        jLabelCenarios.setText("Cenarios Agendados");

        jTextAreaCenarios.setColumns(20);
        jTextAreaCenarios.setEditable(false);
        jTextAreaCenarios.setRows(3);
        jScrollPaneCenarios.setViewportView(jTextAreaCenarios);

        jButtonAdicionarSim.setBackground(new java.awt.Color(153, 255, 204));
        jButtonAdicionarSim.setText("Adicionar");
        jButtonAdicionarSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdicionarSimActionPerformed(evt);
            }
        });

        jButtonRemoveSim.setBackground(new java.awt.Color(153, 255, 204));
        jButtonRemoveSim.setText("Remover");

        jButtonLimparSim.setBackground(new java.awt.Color(153, 255, 204));
        jButtonLimparSim.setText("Limpar");
        jButtonLimparSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparSimActionPerformed(evt);
            }
        });

        jButtonIniciarAgenda.setBackground(new java.awt.Color(153, 255, 204));
        jButtonIniciarAgenda.setText("Iniciar Simulações");

        org.jdesktop.layout.GroupLayout jPanelAgendaLayout = new org.jdesktop.layout.GroupLayout(jPanelAgenda);
        jPanelAgenda.setLayout(jPanelAgendaLayout);
        jPanelAgendaLayout.setHorizontalGroup(
            jPanelAgendaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelAgendaLayout.createSequentialGroup()
                .add(jPanelAgendaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelAgendaLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanelAgendaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabelCenarios)
                            .add(jPanelAgendaLayout.createSequentialGroup()
                                .add(jScrollPaneCenarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 201, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanelAgendaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(jButtonAdicionarSim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButtonRemoveSim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jButtonLimparSim, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .add(jPanelAgendaLayout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(jButtonIniciarAgenda)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAgendaLayout.setVerticalGroup(
            jPanelAgendaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelAgendaLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelCenarios)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelAgendaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelAgendaLayout.createSequentialGroup()
                        .add(jButtonAdicionarSim)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonRemoveSim)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonLimparSim))
                    .add(jScrollPaneCenarios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonIniciarAgenda)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanelAgendaSimulacoesLayout = new org.jdesktop.layout.GroupLayout(jPanelAgendaSimulacoes);
        jPanelAgendaSimulacoes.setLayout(jPanelAgendaSimulacoesLayout);
        jPanelAgendaSimulacoesLayout.setHorizontalGroup(
            jPanelAgendaSimulacoesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelAgendaSimulacoesLayout.createSequentialGroup()
                .add(316, 316, 316)
                .add(jPanelAgenda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(566, Short.MAX_VALUE))
        );
        jPanelAgendaSimulacoesLayout.setVerticalGroup(
            jPanelAgendaSimulacoesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelAgendaSimulacoesLayout.createSequentialGroup()
                .add(44, 44, 44)
                .add(jPanelAgenda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(393, Short.MAX_VALUE))
        );

        jTabbedPaneTelas.addTab("Agenda de Simulações", jPanelAgendaSimulacoes);

        jPanelResultados.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPaneMetricas.setAutoscrolls(true);

        jTreeMetricas.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeMetricasValueChanged(evt);
            }
        });
        jScrollPaneMetricas.setViewportView(jTreeMetricas);

        jToggleButtonTab.setBackground(new java.awt.Color(153, 255, 204));
        buttonGroupTabGraf.add(jToggleButtonTab);
        jToggleButtonTab.setText("TABELA");
        jToggleButtonTab.setEnabled(false);

        jToggleButtonGraf.setBackground(new java.awt.Color(153, 255, 204));
        buttonGroupTabGraf.add(jToggleButtonGraf);
        jToggleButtonGraf.setText("GRÁFICO");
        jToggleButtonGraf.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButtonGrafItemStateChanged(evt);
            }
        });

        jBMaximizar.setBackground(new java.awt.Color(200, 226, 226));
        jBMaximizar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jBMaximizar.setText("Maximizar");
        jBMaximizar.setToolTipText("Maximizar Painél");
        jBMaximizar.setAlignmentX(0.5F);
        jBMaximizar.setMargin(new java.awt.Insets(10, 14, 4, 14));
        jBMaximizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMaximizarActionPerformed(evt);
            }
        });

        jPanelGraf.setBackground(new java.awt.Color(240, 240, 240));
        jPanelGraf.setPreferredSize(new java.awt.Dimension(605, 413));
        jScrollPaneGraf.setViewportView(jPanelGraf);

        jBLimparHistorico.setBackground(new java.awt.Color(200, 226, 226));
        jBLimparHistorico.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jBLimparHistorico.setText("Limpar Histórico");
        jBLimparHistorico.setToolTipText("Maximizar Painél");
        jBLimparHistorico.setAlignmentX(0.5F);
        jBLimparHistorico.setMargin(new java.awt.Insets(10, 14, 4, 14));
        jBLimparHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimparHistoricoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelResultadosLayout = new org.jdesktop.layout.GroupLayout(jPanelResultados);
        jPanelResultados.setLayout(jPanelResultadosLayout);
        jPanelResultadosLayout.setHorizontalGroup(
            jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelResultadosLayout.createSequentialGroup()
                .add(jScrollPaneMetricas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(76, 76, 76)
                .add(jToggleButtonTab, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .add(35, 35, 35)
                .add(jBLimparHistorico)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBMaximizar)
                .add(109, 109, 109)
                .add(jToggleButtonGraf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .add(52, 52, 52))
            .add(jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanelResultadosLayout.createSequentialGroup()
                    .add(277, 277, 277)
                    .add(jScrollPaneGraf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 916, Short.MAX_VALUE)))
        );
        jPanelResultadosLayout.setVerticalGroup(
            jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPaneMetricas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
            .add(jPanelResultadosLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanelResultadosLayout.createSequentialGroup()
                        .add(jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE, false)
                            .add(jToggleButtonTab)
                            .add(jToggleButtonGraf))
                        .add(10, 10, 10))
                    .add(jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jBMaximizar)
                        .add(jBLimparHistorico)))
                .addContainerGap(598, Short.MAX_VALUE))
            .add(jPanelResultadosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanelResultadosLayout.createSequentialGroup()
                    .add(60, 60, 60)
                    .add(jScrollPaneGraf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)))
        );

        jTabbedPaneTelas.addTab("Resultados", jPanelResultados);

        jProgressBar.setForeground(new java.awt.Color(100, 200, 150));

        jPanelIniciarParar.setLayout(new java.awt.CardLayout());

        jButtonIniciarSimulacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/play.gif"))); // NOI18N
        jButtonIniciarSimulacao.setMaximumSize(new java.awt.Dimension(73, 37));
        jButtonIniciarSimulacao.setMinimumSize(new java.awt.Dimension(73, 37));
        jButtonIniciarSimulacao.setPreferredSize(new java.awt.Dimension(73, 37));
        jButtonIniciarSimulacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIniciarSimulacaoActionPerformed(evt);
            }
        });
        jPanelIniciarParar.add(jButtonIniciarSimulacao, "cardIniciar");

        jButtonPararSimulacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/stop.gif"))); // NOI18N
        jButtonPararSimulacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPararSimulacaoActionPerformed(evt);
            }
        });
        jPanelIniciarParar.add(jButtonPararSimulacao, "cardParar");

        jPanelGerarRelatorio.setLayout(new java.awt.CardLayout());

        jButtonGerarGraficos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/report.gif"))); // NOI18N
        jButtonGerarGraficos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGerarGraficosActionPerformed(evt);
            }
        });
        jPanelGerarRelatorio.add(jButtonGerarGraficos, "cardIniciar");

        jButtonGerarRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/stop.gif"))); // NOI18N
        jButtonGerarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGerarRelatorioActionPerformed(evt);
            }
        });
        jPanelGerarRelatorio.add(jButtonGerarRelatorio, "cardParar");

        jMenuArquivo.setMnemonic('q');
        jMenuArquivo.setLabel("Arquivo");
        jMenuArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuArquivoActionPerformed(evt);
            }
        });

        jMenuItemNovo.setMnemonic('n');
        jMenuItemNovo.setText("Novo");
        jMenuItemNovo.setName("Novo"); // NOI18N
        jMenuItemNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNovoActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemNovo);

        jMenuItemAbrir.setMnemonic('a');
        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemAbrir);

        jMenuItemSalvar.setMnemonic('s');
        jMenuItemSalvar.setText("Salvar");
        jMenuItemSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalvarActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemSalvar);

        jMenuItemSalvarComo.setMnemonic('c');
        jMenuItemSalvarComo.setText("SalvarComo");
        jMenuArquivo.add(jMenuItemSalvarComo);

        jMenuItemSair.setMnemonic('r');
        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar.add(jMenuArquivo);

        jMenuFerramentas.setMnemonic('f');
        jMenuFerramentas.setLabel("Ferramentas");

        jMenuItemValidacao.setMnemonic('v');
        jMenuItemValidacao.setText("Validar");
        jMenuItemValidacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemValidacaoActionPerformed(evt);
            }
        });
        jMenuFerramentas.add(jMenuItemValidacao);

        jMenuBar.add(jMenuFerramentas);

        jMenuAjuda.setMnemonic('j');
        jMenuAjuda.setText("Ajuda");

        jMenuItemTopicosAjuda.setMnemonic('t');
        jMenuItemTopicosAjuda.setText("Tópicos de Ajuda");
        jMenuAjuda.add(jMenuItemTopicosAjuda);

        jMenuItemSobre.setMnemonic('e');
        jMenuItemSobre.setText("Sobre o TONetS");
        jMenuItemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSobreActionPerformed(evt);
            }
        });
        jMenuAjuda.add(jMenuItemSobre);

        jMenuBar.add(jMenuAjuda);

        setJMenuBar(jMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(57, 57, 57)
                .add(jPanelIniciarParar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPaneTelas)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanelGerarRelatorio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1148, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPaneTelas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(jPanelIniciarParar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(jProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(714, Short.MAX_VALUE)
                    .add(jPanelGerarRelatorio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuItemSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvarActionPerformed
        try{
            gerarArquivosSimTemp();            
            // escolhendo o diretorio
            JFileChooser jFileChooser1 = new JFileChooser("Files");
            jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jFileChooser1.showSaveDialog(this);
            File targetLocation = jFileChooser1.getSelectedFile();
            if(targetLocation == null)
                return;
            File sourceLocation = new File("Files/"+simTmpUrl);
            try{
                FileManagement.copyDirectory(sourceLocation,targetLocation);
                JOptionPane.showMessageDialog(this, messages.recuperarMsg("salvar_ok"),"Sucesso",JOptionPane.INFORMATION_MESSAGE);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, messages.recuperarMsg("salvar_erro"),"Erro",JOptionPane.INFORMATION_MESSAGE);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, messages.recuperarMsg("salvar_erro_dados") ,"Erro",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemSalvarActionPerformed
    
    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed

    	JFileChooser jFileChooser1 = new JFileChooser("Files");
    	jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    	jFileChooser1.showOpenDialog(this);
    	File sourceLocation = jFileChooser1.getSelectedFile();    	
        loadSimulation(sourceLocation);
    
    }//GEN-LAST:event_jMenuItemAbrirActionPerformed
    
    private void jMenuItemNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNovoActionPerformed
// 

    	mPanelDesenho.Reset();
    }//GEN-LAST:event_jMenuItemNovoActionPerformed
    
    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSairActionPerformed
    
    private void jButtonLimparSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparSimActionPerformed
        jTextAreaCenarios.setText("");
    }//GEN-LAST:event_jButtonLimparSimActionPerformed
    
    private void jMenuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSobreActionPerformed
        Sobre sobre = new Sobre();
        sobre.setVisible(true);
    }//GEN-LAST:event_jMenuItemSobreActionPerformed
    
    private void jMenuItemValidacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemValidacaoActionPerformed
        janelaValidacao = new JanelaValidacao();
        janelaValidacao.setVisible(true);
        Thread t= new Thread(janelaValidacao);
        t.start();
    }//GEN-LAST:event_jMenuItemValidacaoActionPerformed
    
    private void jToggleButtonGrafItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonGrafItemStateChanged
        if (jToggleButtonGraf.isSelected()){
            graphicShow(false);
        }else{
            //JOptionPane.showMessageDialog(this,"Indisponível!","Tabela",JOptionPane.OK_OPTION);
            
            JTextArea tmp = new JTextArea();
            BufferedReader in;
            FileReader file;
            try {
                file = new FileReader("Files/SimTemp/results.res");
                in = new BufferedReader(file);
                tmp = new JTextArea();
                tmp.setText("");
                while (in.ready()) {
                    String aux = in.readLine()+"\n";
                    tmp.append(aux);
                    //  System.out.println(aux);
                }
                JLayeredPane p = jPanelGraf;
                p.setEnabled(true);
                this.jPanelGraf.removeAll();
                tmp.setEditable(false);
                tmp.setBackground(new java.awt.Color(250, 255, 250));
                tmp.setForeground(new java.awt.Color(50, 0, 50));
                tmp.setColumns(50);
                tmp.setLineWrap(false);
                tmp.setRows(50);
                tmp.setWrapStyleWord(true);
                this.jPanelGraf.add(tmp);
                repaint();
            }catch(Exception e){
                // e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jToggleButtonGrafItemStateChanged
    
    private void jBMaximizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMaximizarActionPerformed
        //abre grafico em nova janela maximizada
        graphicShow(true);
    }//GEN-LAST:event_jBMaximizarActionPerformed
    
    public JLayeredPane getjPanelGraf(){
        return this.jPanelGraf;
    }
    
    private void jTreeMetricasValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeMetricasValueChanged
        graphicShow(false);
    }//GEN-LAST:event_jTreeMetricasValueChanged
    
    private void jButtonAdicionarSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdicionarSimActionPerformed
        JFileChooser fc = new JFileChooser();
        
        // restringe a amostra a diretorios apenas
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            jTextAreaCenarios.append(diretorio.getPath()+"\n");
            JOptionPane.showMessageDialog(this, "Voce escolheu o diretório: " + diretorio.getPath());
        } else
            JOptionPane.showMessageDialog(this, "Voce nao selecionou nenhum diretorio.");
    }//GEN-LAST:event_jButtonAdicionarSimActionPerformed
    
    private void jRadioButtonConversaoTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonConversaoTStateChanged
        if (jRadioButtonConversaoT.isSelected()){
            this.jComboBoxPosConversores.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonConversaoTStateChanged
    
    private void jRadioButtonConversaoEPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonConversaoEPStateChanged
        if (jRadioButtonConversaoEP.isSelected()){
            this.jComboBoxPosConversores.setEnabled(true);
            this.jComboBoxPosConversores.setModel(new javax.swing.DefaultComboBoxModel(estrategiasPosConversoresEsparsaParcial));
        }
    }//GEN-LAST:event_jRadioButtonConversaoEPStateChanged
    
    private void jRadioButtonConversaoEStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonConversaoEStateChanged
        if (jRadioButtonConversaoE.isSelected()){
            this.jComboBoxPosConversores.setEnabled(true);
            this.jComboBoxPosConversores.setModel(new javax.swing.DefaultComboBoxModel(estrategiasPosConversoresEsparsa));
        }
    }//GEN-LAST:event_jRadioButtonConversaoEStateChanged
    
    private void jRadioButtonConversaoPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonConversaoPStateChanged
        if (jRadioButtonConversaoP.isSelected()){
            this.jComboBoxPosConversores.setEnabled(true);
            this.jComboBoxPosConversores.setModel(new javax.swing.DefaultComboBoxModel(estrategiasPosConversoresParcial));
        }
    }//GEN-LAST:event_jRadioButtonConversaoPStateChanged
    
    private void jRadioButtonSemConversaoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonSemConversaoStateChanged
        if (jRadioButtonSemConversao.isSelected()){
            this.jComboBoxPosConversores.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonSemConversaoStateChanged
    
    private void jRadioButtonAdaptiveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAdaptiveItemStateChanged
        if (this.jRadioButtonAdaptive.isSelected()){
            this.jComboBoxSobrevivencia.setModel(new javax.swing.DefaultComboBoxModel(adaptive));
        }
    }//GEN-LAST:event_jRadioButtonAdaptiveItemStateChanged
    
    private void jRadioButtonRestauracaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRestauracaoItemStateChanged
        if (this.jRadioButtonRestauracao.isSelected()){
            this.jComboBoxSobrevivencia.setModel(new javax.swing.DefaultComboBoxModel(restauracao));
        }
    }//GEN-LAST:event_jRadioButtonRestauracaoItemStateChanged
    
    private void jRadioButtonProtecaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonProtecaoItemStateChanged
        if (this.jRadioButtonProtecao.isSelected()){
            this.jComboBoxSobrevivencia.setModel(new javax.swing.DefaultComboBoxModel(protecao));
        }
    }//GEN-LAST:event_jRadioButtonProtecaoItemStateChanged
    
    private void jCheckBoxSobrevivenciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSobrevivenciaItemStateChanged
        if(this.jCheckBoxSobrevivencia.isSelected()){
            this.jRadioButtonProtecao.setSelected(true);
            this.jComboBoxSobrevivencia.setModel(new javax.swing.DefaultComboBoxModel(protecao));
            this.jRadioButtonProtecao.setEnabled(true);
            this.jRadioButtonRestauracao.setEnabled(true);
            this.jRadioButtonAdaptive.setEnabled(true);
            this.jComboBoxSobrevivencia.setEnabled(true);
        }else{
            this.jRadioButtonProtecao.setEnabled(false);
            this.jRadioButtonRestauracao.setEnabled(false);
            this.jRadioButtonAdaptive.setEnabled(false);
            this.jComboBoxSobrevivencia.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxSobrevivenciaItemStateChanged
    
    private void criarPares()throws Exception{
        Vector<Node> listaNo = this.mPanelDesenho.getTopologiaListaNo();
            this.listaPares = new Vector();
            for (int i = 0; i < this.jTableTrafegoPar.getRowCount(); i++) {
                for (int j = 0; j < this.jTableTrafegoPar.getColumnCount()-1; j++) {
                    if (i!=j){
                        System.out.print(i+","+j);
                        Pair p = new Pair(listaNo.get(i),listaNo.get(j));
                        p.setPrivilege(Integer.parseInt((String)this.jTableTrafegoPar.getValueAt(i,j+1)));
                        p.setCategory(1);
                        listaPares.add(p);
                        System.out.println(p.getName());
                        System.out.println(p.getPrivilege());
                    }
                }
            }
            //JOptionPane jp = new JOptionPane();
            // jp.showMessageDialog(this,"Pares criados com sucesso.");
    }
    
    private void montaTabelaDePares(){
        Vector<Node> listaNo = this.mPanelDesenho.getTopologiaListaNo();
        int numNos = listaNo.size();
        Object[][] objs = new Object[numNos][numNos+1];
        String[] titles = new String[numNos+1];
        titles[0]="NÓS";
        for (int i = 0; i < numNos; i++) {
            titles[i+1]=listaNo.get(i).getName();
            objs[i][0]=listaNo.get(i).getName();
            for (int j = 0; j < numNos; j++) {
                if (i!=j){
                    //objs[i][j+1]=listaNo.get(j).getName();
                    objs[i][j+1]="1";
                }else{
                    objs[i][j+1]="-";
                }
            }
        }
        this.jTableTrafegoPar.setModel(new DefaultTableModel(objs,titles));
        this.jTableTrafegoPar.setRowHeight(20);
        this.jTableTrafegoPar.getColumnModel().setColumnSelectionAllowed(true);
        Enumeration e = this.jTableTrafegoPar.getColumnModel().getColumns();
        
        while(e.hasMoreElements()){
            TableColumn c = (TableColumn)e.nextElement();
            //c.setMinWidth(10);
            //c.setMaxWidth(40);
            c.setPreferredWidth(25);
        }
        //jScrollPaneTrafegoPar.setViewportView(jTableTrafegoPar);
    }
    
    private void jRadioButtonTNUParItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTNUParItemStateChanged
        if (this.jRadioButtonTNUPar.isSelected()){
            this.jTableTrafegoPar.setEnabled(true);
            this.montaTabelaDePares();
            this.jTextAreaTrafego.setText("Tráfego Não Uniforme (por PAR). Configure os pesos de cada par na tabela de tráfego ao lado.");
        } else{
            this.jTableTrafegoPar.setEnabled(false);
            this.jTextAreaTrafego.setText("Tráfego Não Uniforme (por NÓ). Configure o peso de cada nó na tela Topologia clicando com o botão direito sobre o respectivo nó");
        }
    }//GEN-LAST:event_jRadioButtonTNUParItemStateChanged
    
    private void jRadioButtonNaoUniformeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonNaoUniformeItemStateChanged
        if (this.jRadioButtonNaoUniforme.isSelected()){
            this.jScrollPaneTrafegoPar.setViewportView(jTableTrafegoPar);
            this.jRadioButtonTNUPar.setSelected(true);
            this.jRadioButtonTNUPar.setEnabled(true);
            this.jRadioButtonTNUNo.setEnabled(true);
            this.jTableTrafegoPar.setEnabled(true);
            this.montaTabelaDePares();
            this.jTextAreaTrafego.setText("Tráfego Não Uniforme (por PAR). Configure os pesos de cada par na tabela de tráfego ao lado.");
        }else{
            this.jRadioButtonTNUPar.setEnabled(false);
            this.jRadioButtonTNUNo.setEnabled(false);
            this.jScrollPaneTrafegoPar.setViewportView(null);
            this.jTableTrafegoPar.setEnabled(false);
            this.jTextAreaTrafego.setText("Tráfego Uniforme.");
        }
    }//GEN-LAST:event_jRadioButtonNaoUniformeItemStateChanged
    
    private void jToggleButtonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMoverActionPerformed
        
        mPanelDesenho.actionButton(1);
        if (jToggleButtonMover.isSelected() == false) {
            mPanelDesenho.actionButton(0);
        }
        jToggleButtonLink.setSelected(false);
        jToggleButtonNo.setSelected(false);
        jToggleButtonDelete.setSelected(false);
    }//GEN-LAST:event_jToggleButtonMoverActionPerformed
    
    private void jToggleButtonNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonNoActionPerformed
        mPanelDesenho.actionButton(3);
        if (jToggleButtonNo.isSelected() == false) {
            mPanelDesenho.actionButton(0);
        }
        jToggleButtonMover.setSelected(false);
        jToggleButtonLink.setSelected(false);
        jToggleButtonDelete.setSelected(false);
    }//GEN-LAST:event_jToggleButtonNoActionPerformed
    
    private void jToggleButtonLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonLinkActionPerformed
        mPanelDesenho.actionButton(2);
        if (jToggleButtonLink.isSelected() == false) {
            mPanelDesenho.actionButton(0);
        }
        jToggleButtonMover.setSelected(false);
        jToggleButtonNo.setSelected(false);
        jToggleButtonDelete.setSelected(false);
    }//GEN-LAST:event_jToggleButtonLinkActionPerformed
    
    private void jToggleButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonDeleteActionPerformed
        mPanelDesenho.actionButton(4);
        if (jToggleButtonDelete.isSelected() == false) {
            mPanelDesenho.actionButton(0);
        }
        jToggleButtonMover.setSelected(false);
        jToggleButtonLink.setSelected(false);
        jToggleButtonNo.setSelected(false);
    }//GEN-LAST:event_jToggleButtonDeleteActionPerformed
    
    private void jButtonPararSimulacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPararSimulacaoActionPerformed
        this.trocaJButtonIniciarPararSim();
        this.management.stop();
        JOptionPane.showMessageDialog(this,"Simulação Interrompida!","Fim",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonPararSimulacaoActionPerformed
    
    private void trocaJButtonIniciarPararSim(){
        //trocando de botão
        ((CardLayout) jPanelIniciarParar.getLayout()).next(jPanelIniciarParar);
    }
    
    private void jButtonIniciarSimulacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIniciarSimulacaoActionPerformed
        this.jToggleButtonTab.setEnabled(false);
        //trocando de botão <parar>
        ((CardLayout) jPanelIniciarParar.getLayout()).next(jPanelIniciarParar);
        //iniciando barra de progresso
        jProgressBar.setMinimum(0);
        jProgressBar.setStringPainted(true);
        jProgressBar.setMaximum(100);
        jProgressBar.setValue(0);
        //temp
        //  this.mPanelDesenho.getTopologia().imprimeLinks();
        //fim temp
        try{
        	gerarArquivosSimTemp();
            this.start();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Erro na entrada de dados!","Erro",JOptionPane.INFORMATION_MESSAGE);
            //trocando de botão <iniciar>
            ((CardLayout) jPanelIniciarParar.getLayout()).next(jPanelIniciarParar);
        }
    }//GEN-LAST:event_jButtonIniciarSimulacaoActionPerformed
    
    private void carregarArquivosSim(){
    	
        String net = "Files/" + simTmpUrl+ "/network.net";
        String sim = "Files/" + simTmpUrl + "/simulation.sim";
        String res = "Files/" + simTmpUrl + "/results.res";
        String pairs = "Files/" + simTmpUrl +"/pairs.prs";
        
        //jToggleButtonMapLock.setEnabled(false);
        //mPanelDesenho.setMapLock(false);
        
        Vector config = new Vector(4);
        Simulation simulacao = SimulationFileController.readFile(sim, config); //parametros da simulacao
        
        // double incLoad = 150; //incremento da carga
        double incLoad = (Double) config.get(0); //incremento da carga
        jTextFieldIncremento.setText(String.valueOf(incLoad));
        
        //int points = 2; //numero de pontos (diferentes cargas de tréfego) a serem simulados
        int points = (Integer) config.get(1); //numero de pontos (diferentes cargas de tréfego) a serem simulados
        jTextFieldPontosCarga.setText((String.valueOf(points)));
        
        //int replyNumber = 2; //numero de replicações
        int replyNumber = (Integer) config.get(2); //numero de replicações
        jTextFieldNumRep.setText(String.valueOf(replyNumber));
        
        //Tipo de Tráfego
        if(((Integer) config.get(3)) == 0){
        	jRadioButtonUniforme.setSelected(true);
        }else{
        	jRadioButtonUniforme.setSelected(false);       	
        }
        
        //Tipo de comutação
        jComboBoxSwitchingType.setSelectedIndex((Integer)config.get(4));
        
        Vector<Integer> conversionType = new Vector<Integer>(1);
        //Recupera os nós e seus equivalentes gráficos (Vector<Node>, Vector<NoGrf>, Vector<Enl)
        Vector [] bothNodesAndLinks = NodeFileController.readFile(net, conversionType, jXMapKit1.getMainMap());
        mPanelDesenho.getTopologiaListaNo().addAll(bothNodesAndLinks[1]);
        mPanelDesenho.updateNsquares();
        mPanelDesenho.getTopologiaListaEnl().addAll(bothNodesAndLinks[2]);
        mPanelDesenho.resetMap();
        mPanelDesenho.repaint();
        switch(conversionType.get(0)){
	        
	        case 0: jRadioButtonSemConversao.setSelected(true);
	        		break;
	        case 1: jRadioButtonConversaoP.setSelected(true);
	        		break;
	        case 2: jRadioButtonConversaoE.setSelected(true);
					break;
	        case 3: jRadioButtonConversaoEP.setSelected(true);
					break;
	        case 4: jRadioButtonConversaoT.setSelected(true);
					break;	
        	
        }
     
        jSpinnerNivelConfianca.setValue(1 - (Double)config.get(5));
        
        jCheckBoxGerarFalhas.setSelected((Boolean)config.get(6));
        
        jTextFieldintensInicial.setText(String.valueOf(simulacao.getArrivedRate()));
        jTextFieldHurstMin.setText(String.valueOf(simulacao.getHurstMin()));
        jTextFieldHurstMax.setText(String.valueOf(simulacao.getHurstMax()));    
        
        jTextFieldNumReq.setText(String.valueOf(simulacao.getTotalNumberOfRequest()));
        
        jComboBoxAlgosWA.setSelectedItem(simulacao.getWAAlgorithm());
        
        /*Signification Level
        
        management.setSignificativeLevel((Double)config.get(4));
        management.setFailure((Boolean)config.get(5));
        management.setFixLinkRate((Double)config.get(6));
        management.setOccurRate((Double)config.get(7));
        
        management.setFileRes(res);
        management.setGui(this);
        
        management.start(); */
    	
    }
    
    private void gerarArquivosSimTemp()throws Exception{
        Vector<Node> listaNo = this.mPanelDesenho.getTopologiaListaNo();
        if ((listaNo==null)||(listaNo.size()<2)){
            JOptionPane.showMessageDialog(this, messages.recuperarMsg("sim_topologia_erro_nos"),"Erro",JOptionPane.INFORMATION_MESSAGE);
            throw new Exception();
        }
        for (int i = 0; i < listaNo.size(); i++) {
            if (listaNo.get(i).getOxc().getLinksList().size()<1){
                JOptionPane.showMessageDialog(this, messages.recuperarMsg("sim_topologia_erro_link"),"Erro",JOptionPane.INFORMATION_MESSAGE);
                throw new Exception();    
            }
        }
        
        this.fileMamegement.setListNodes(this.mPanelDesenho.getTopologia().getTopologiaListaNo());
        if ((this.jRadioButtonTNUPar.isEnabled())&&(this.jRadioButtonTNUPar.isSelected())){
            this.criarPares();
        }else{
            this.listaPares = new Vector();
        }
        this.fileMamegement.setListPair(this.listaPares);
        this.fileMamegement.geraArquivoPair();
        
        String conversionType="without conversion";
        if (jRadioButtonConversaoT.isSelected()){
            conversionType="full conversion";
        }else if (jRadioButtonConversaoE.isSelected()){
            conversionType="esparse conversion";
        }else if (jRadioButtonConversaoEP.isSelected()){
            conversionType="esparse partial conversion";
        }else if(jRadioButtonConversaoP.isSelected()){
            conversionType="Partial conversion";
        }
        jXMapKit1.getAddressLocation();
        jXMapKit1.getCenterPosition();
        this.fileMamegement.setMap(jXMapKit1.getMainMap());
        this.fileMamegement.geraArquivoNetwork(conversionType);
        gerarArquivoSimulacao();
        this.fileMamegement.closeFiles();
    }
    public void simFinished(){
        this.trocaJButtonIniciarPararSim();
        JOptionPane.showMessageDialog(this,"Simulação finalizada!","fim",JOptionPane.INFORMATION_MESSAGE);
        this.jToggleButtonTab.setEnabled(true);
    }
    
    public void progressRefresh(int progress, Vector<Vector<Measurements>> m){
        //atualiza measurements
        this.measurements=m;
        //barra de progresso
        this.jProgressBar.setValue(progress);
        this.jProgressBar.setString(progress+" %");
        //gráfico
        graphicShow(false);
        this.repaint();

        if(progress == 100)
            chartPos++;
    }
    
    /**
     * Exibe o gráfico selecionado na árvore
     * @param boolean newWindowMax.
     * True para exibir o grafico em uma nova janela maximizada
     */
    private void graphicShow(boolean newWindowMax){
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTreeMetricas.getLastSelectedPathComponent();
        if (node== null) return;
        if(!node.isLeaf()) return;
        
        String metrica = node.toString();
        try{
            if (!newWindowMax){
                Chart chart = new Chart(metrica);
                relatorios.addChart(metrica, chart.getChart(metrica,false,this, 2,measurements));

            }else{
                Chart chart = new Chart(metrica);
                relatorios.addChart(metrica, chart.getChart(metrica,true,this, 2,measurements));
                chart.setVisible(true);
                chart.setSize(700,500);
                chart.setExtendedState(JFrame.MAXIMIZED_BOTH);
            }
            this.jToggleButtonGraf.setSelected(true);
        }catch(Exception e){
        	e.printStackTrace();
        }
        this.repaint();
    }
    
    private void jMenuArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuArquivoActionPerformed
        
    }//GEN-LAST:event_jMenuArquivoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if(!saudacao){
            Saudacao saudacao = new Saudacao();
            saudacao.setVisible(true);
          
        }

    }//GEN-LAST:event_formWindowOpened

    private void jToggleButtonTopology2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTopology2ActionPerformed

        mPanelDesenho.Reset();
        showPropriedades(Constants.TOPOLOGY_2);

    }//GEN-LAST:event_jToggleButtonTopology2ActionPerformed

    private void jButtonGerarGraficosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGerarGraficosActionPerformed
          try {
            relatorios.creatReport("Relatorios/Relatorio.pdf", "Relatório de Simulação");
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonGerarGraficosActionPerformed

    private void jButtonGerarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGerarRelatorioActionPerformed
      
    }//GEN-LAST:event_jButtonGerarRelatorioActionPerformed

    private void jPanelDesenhoTopComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanelDesenhoTopComponentResized

        jLayeredPane1.setSize(jPanelDesenhoTop.getSize());
        mPanelDesenho.setSize(jPanelDesenhoTop.getSize());
        jXMapKit1.setSize(jPanelDesenhoTop.getSize());
}//GEN-LAST:event_jPanelDesenhoTopComponentResized

    private void jToggleButtonMapActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMapActiveActionPerformed

        mPanelDesenho.switchPanel();
    }//GEN-LAST:event_jToggleButtonMapActiveActionPerformed

    private void jToggleButtonMapLockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMapLockActionPerformed

        mPanelDesenho.switchMapLock();
    }//GEN-LAST:event_jToggleButtonMapLockActionPerformed

    private void jToggleButtonMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonMapActionPerformed
        if(jXMapKit1.isVisible()){
            mPanelDesenho.activatePanel();
            jToggleButtonMapActive.setSelected(false);
            jXMapKit1.setVisible(false);
        } else{
            jXMapKit1.setVisible(true);
            jToggleButtonMapActive.setSelected(true);
            mPanelDesenho.deactivatePanel();
        }
    }//GEN-LAST:event_jToggleButtonMapActionPerformed

    private void jBLimparHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimparHistoricoActionPerformed

        Chart.pastDataSet.clear();
        chartPos =0 ;
    }//GEN-LAST:event_jBLimparHistoricoActionPerformed

    private void jToggleButtonTopology1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTopology1ActionPerformed
        mPanelDesenho.Reset();
        showPropriedades(Constants.TOPOLOGY_1);
    }//GEN-LAST:event_jToggleButtonTopology1ActionPerformed

    private void jToggleButtonTopology3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTopology3ActionPerformed
        mPanelDesenho.Reset();
        showPropriedades(Constants.TOPOLOGY_3);
    }//GEN-LAST:event_jToggleButtonTopology3ActionPerformed

    private void jToggleButtonTopology4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTopology4ActionPerformed
        mPanelDesenho.Reset();
        showPropriedades(((JToggleButton)evt.getSource()).getText());
    }//GEN-LAST:event_jToggleButtonTopology4ActionPerformed

    private void jComboBoxSwitchingTypePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxSwitchingTypePropertyChange
        
    }//GEN-LAST:event_jComboBoxSwitchingTypePropertyChange

    private void jComboBoxSwitchingTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSwitchingTypeActionPerformed
        if(jComboBoxSwitchingType.getSelectedIndex() != Constants.SWITCHING_HYBRID)
            jSliderTrafficSample.setEnabled(false);
        else
            jSliderTrafficSample.setEnabled(true);
    }//GEN-LAST:event_jComboBoxSwitchingTypeActionPerformed

    private void jSliderTrafficSampleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTrafficSampleStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            float scale = (float)source.getValue()/100;
            jTextFieldHurstMin.setEnabled(scale > 0.01);
            jTextFieldHurstMax.setEnabled(scale > 0.01);
            jSliderTrafficMaxHolder.setEnabled(scale <= 0.01);

        }
    }//GEN-LAST:event_jSliderTrafficSampleStateChanged

    private void jTextFieldintensInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldintensInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldintensInicialActionPerformed

    private void jTextFieldHurstMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHurstMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHurstMinActionPerformed

    private void jTextFieldHurstMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHurstMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHurstMaxActionPerformed
    
    public String getWAssingAlgo(){
        return this.wAssingAlgo;
    }
    
    private void gerarArquivoSimulacao() throws Exception {
        
        Double arriveRate = Double.parseDouble(jTextFieldintensInicial.getText());
        float scale = jSliderTrafficSample.getValue();
        float hurstMin, hurstMax;
        float holder = Math.max(jSliderTrafficMaxHolder.getValue(), 1);
        if(jSliderTrafficMaxHolder.isEnabled()){
            hurstMin = ((holder + 1)/2) * 0.8f;
            hurstMax = ((holder + 1)/2) * 1.2f;
        }else{   
            hurstMin = Float.parseFloat(jTextFieldHurstMin.getText());
            hurstMax = Float.parseFloat(jTextFieldHurstMax.getText());          
        }
        int numReq = Integer.valueOf(jTextFieldNumReq.getText());
        this.wAssingAlgo = (String)jComboBoxAlgosWA.getSelectedItem();
        int simulationType = 0;
        //configurar tipo de sim...
        String sobrevivencia = (String)jComboBoxSobrevivencia.getSelectedItem();
        int roteamento = jComboBoxRoteamento.getSelectedIndex();
        
        if (jCheckBoxSobrevivencia.isSelected()){ //Sobrevivência
            if (jRadioButtonProtecao.isSelected()){//proteção
                if (sobrevivencia.equalsIgnoreCase("Two Step")){
                    simulationType=10+roteamento;
                }else if (sobrevivencia.equalsIgnoreCase("Two Step Com backtracking")){
                    simulationType=12+roteamento;
                }
            }else if (jRadioButtonRestauracao.isSelected()){//Restauração
                if (sobrevivencia.equalsIgnoreCase("restauração simples")){
                    simulationType=21+roteamento;
                }else if(sobrevivencia.equalsIgnoreCase("Active Restoration")){
                    simulationType=24+roteamento*0;
                }
            }else{//adaptative
                simulationType=30+roteamento;
            }
        }else{//Sem sobrevivência
            simulationType=0+2*roteamento;
        }
        
        Simulation s = new Simulation(1.0,arriveRate, hurstMin, hurstMax,numReq,simulationType,wAssingAlgo);
        String incLoad = Double.parseDouble(jTextFieldIncremento.getText())+"";
        String points = Integer.parseInt(jTextFieldPontosCarga.getText())+"";
        String numReply = Integer.parseInt(jTextFieldNumRep.getText())+"";
        double siginificativeLevel = 1-(Double)jSpinnerNivelConfianca.getValue();
        
        String trafficType="0";//uniforme
        if (jRadioButtonUniforme.isSelected()){
            trafficType="0";//uniforme
        }else if (jRadioButtonTNUNo.isSelected()){
            trafficType="1";//não uniforme por par
        }else if (jRadioButtonTNUPar.isSelected()){
            trafficType="2";// não uniforme por nó
        }
        
        String switchingType = jComboBoxSwitchingType.getSelectedIndex() + "";     
        
        boolean failure = jCheckBoxGerarFalhas.isSelected();
        double fixLinkRate=0;
        double occurRate=0;
        if (failure){
            double fm=5;//fator multiplicativo
            fixLinkRate=1*fm;
            occurRate = fm*failureOcurrRateCompute();
        }
        fileMamegement.gerarArquivoSimulacao(s,incLoad,points, hurstMin, hurstMax, numReply,siginificativeLevel,trafficType, switchingType,failure, fixLinkRate,occurRate);
    }
    
    private double failureOcurrRateCompute(){
        double rate = 0.05;
        //calcular rate, considerando distancia dos links (topologia)
        return rate;
    }
    /**
     *mostra a janela de propriedades do no
     *@param no NoGrf
     */
    public void showPropriedades(NoGrf no) {
        this.pNo = new PropriedadesNo(no);
        this.pNo.setSize(220,320);
        this.pNo.setResizable(false);
        this.pNo.setLocation(no.getX(),no.getY());
        this.pNo.setVisible(true);
    }

      /**
     *mostra a janela de propriedades da topologia a ser carregada
     *@param topologyName
     */
    public void showPropriedades(final String topologyName) {
        this.pTopologia = new PropriedadesTopologia(topologyName);
        this.pTopologia.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosedPropriedadesTopologia(evt, topologyName);
            }

            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                if(!pTopologia.isVisible())
                    formWindowClosedPropriedadesTopologia(evt, topologyName);
            }
        });

        this.pTopologia.setSize(220,320);
        this.pTopologia.setResizable(false);
        this.pTopologia.setLocation(this.getWidth()/2 - 220/2, this.getHeight()/2 - 320/2);
        this.pTopologia.setVisible(true);
       
    }

    private void formWindowClosedPropriedadesTopologia(java.awt.event.WindowEvent evt, String topologyName) {

        File sourceLocation;
        if(topologyName.equals(Constants.TOPOLOGY_1)){
           sourceLocation = new File("Topologies/"+Constants.TOPOLOGY_1);
           loadSimulation(sourceLocation);
        }else if(topologyName.equals(Constants.TOPOLOGY_2)){
           sourceLocation = new File("Topologies/"+Constants.TOPOLOGY_2);
           loadSimulation(sourceLocation);
        }else if(topologyName.equals(Constants.TOPOLOGY_3)){
           sourceLocation = new File("Topologies/"+Constants.TOPOLOGY_3);
           loadSimulation(sourceLocation);
        }else{
           sourceLocation = new File("Topologies/"+topologyName);
           loadSimulation(sourceLocation);
        }
    }

    /**
     *mostra a janela de propriedades do link
     *@param link LinkGrf
     */
    public void showPropriedades(Topologia topologia, int indexOfLink, LinkGrf link) {
        this.pLink = new PropriedadesLink(topologia,indexOfLink);
        this.pLink.setResizable(false);
        this.pLink.setSize(280,177);
        this.pLink.setLocation((link.getX1()+link. getX2())/2,(link.getY1()+link.getY2())/2);
        this.pLink.setVisible(true);
    }

    /**
     *mostra a janela de propriedades do link
     *@param link LinkGrf
     */
    public void carregarTopologia(Topologia topologia, int indexOfLink, LinkGrf link) {
        this.pLink = new PropriedadesLink(topologia,indexOfLink);
        this.pLink.setResizable(false);
        this.pLink.setSize(280,177);
        this.pLink.setLocation((link.getX1()+link.getX2())/2,(link.getY1()+link.getY2())/2);
        this.pLink.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
      //PlasticLookAndFeel.setPlasticTheme(new com.jgoodies.looks.plastic.theme.SkyBlue());
        try {
             //Plastic3DLookAndFeel p =  new Plastic3DLookAndFeel();
             //p.setCurrentTheme(new SkyBlue());
            // UIManager.setLookAndFeel(p);
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main main = new Main();
                main.setSize(950, 700);
                main.setExtendedState(JFrame.MAXIMIZED_BOTH);
                main.setVisible(true);
            }
        });
    }

    private void loadSimulation(File sourceLocation){

        File targetLocation = new File("Files/"+simTmpUrl);
        if(new File(sourceLocation + "/" + "simulation.sim").exists()){
    	 try{
    		 FileManagement.copyDirectory(sourceLocation,targetLocation);
    		 mPanelDesenho.Reset();
    		 carregarArquivosSim();

             JOptionPane.showMessageDialog(this, messages.recuperarMsg("carregar_ok") ,"Sucesso",JOptionPane.INFORMATION_MESSAGE);
         }catch(Exception e){
             JOptionPane.showMessageDialog(this, messages.recuperarMsg("carregar_erro") ,"Erro",JOptionPane.ERROR_MESSAGE);
         }
    	}
    }
    
    private void start(){
        String net = "Files/" + simTmpUrl+ "/network.net";
        String sim = "Files/" + simTmpUrl + "/simulation.sim";
        String res = "Files/" + simTmpUrl + "/results.res";
        String pairs = "Files/" + simTmpUrl +"/pairs.prs";
        
        Vector config = new Vector(4);
        Simulation simulacao = SimulationFileController.readFile(sim, config); //parametros da simulacao
        
        // double incLoad = 150; //incremento da carga
        double incLoad = (Double) config.get(0); //incremento da carga
        System.out.println("inc Load = " + incLoad);
        
        //int points = 2; //numero de pontos (diferentes cargas de tréfego) a serem simulados
        int points = (Integer) config.get(1); //numero de pontos (diferentes cargas de tréfego) a serem simulados
        System.out.println("points = " + points);
        
        //int replyNumber = 2; //numero de replicações
        int replyNumber = (Integer) config.get(2); //numero de replicações
        System.out.println("reply number = " + replyNumber);
        
        Vector<Integer> conversionType=new Vector<Integer>(1);
        //Recupera os nós e seus equivalentes gráficos (Vector<Node>, Vector<NoGrf>)
        Vector [] bothNodes = NodeFileController.readFile(net, conversionType, jXMapKit1.getMainMap());
        
        //criando todas as simulações...
        /**
         * allSimulations é um Vector de Vector. Isto é, o 1º Vector armazena Vectors
         * com todas as replicações simuladas para uma mesma carga de tráfego.
         */
        Vector<Vector<Simulation>> allSimulations = new Vector<Vector<Simulation>> ();
        double newArriveRate = simulacao.getArrivedRate();
        float newHusrtMin = simulacao.getHurstMin();
        float newHurstMax = simulacao.getHurstMax();
        //loop para geração de todos os pontos
        for (int i = 0; i < points; i++) {
            allSimulations.add(new Vector<Simulation> ());
            //loop para geração das replicações
            for (int j = 0; j < replyNumber; j++) {
                Simulation s = new Simulation(simulacao.getHoldRate(),
                        newArriveRate,
                        newHusrtMin,
                        newHurstMax,
                        simulacao.getTotalNumberOfRequest(),
                        simulacao.getSimulationType(),
                        simulacao.getWAAlgorithm());
                        s.setnumReply(j);              
                
                Mesh mesh = new Mesh(bothNodes[0],
                        simulacao.getWAAlgorithm(), pairs,(Integer)config.get(3), (Integer)config.get(4));
                mesh.setConversionType(conversionType.get(0));
                mesh.setFuzzyClassification(new FuzzyClassification("src/traffic/classification.fcl"));
                s.setMesh(mesh);
                allSimulations.lastElement().add(s);
                
            }
            newArriveRate += incLoad;
        }
        
        this.management = new SimulationManagement(
                allSimulations);
        
        management.setSignificativeLevel((Double)config.get(5));
        management.setFailure((Boolean)config.get(6));
        management.setFixLinkRate((Double)config.get(7));
        management.setOccurRate((Double)config.get(8));
        
        management.setFileRes(res);
        management.setGui(this);
        
        management.start();
    }
    
    private void initOtherComponents() throws FileNotFoundException {
      
        /*painel de desenho
        mPanelDesenho=new MousePanel(this);
        mPanelDesenho.setLayout(null);
        //mPanelDesenho.setBackground(new Color(227,241,241));
        mPanelDesenho.setOpaque(false);
        this.jPanelDesenhoTop.add(mPanelDesenho);*/
        
        jSliderTrafficSample = new FloatJSlider(jSliderTrafficSample.getMinimum(), 
                                                jSliderTrafficSample.getMaximum(), 
                                                jSliderTrafficSample.getValue());
        jSliderTrafficSample.setPaintLabels(true);
      
        //painel de desenho
        mPanelDesenho=new MousePanel(this);
        mPanelDesenho.setLayout(null);
        mPanelDesenho.setBackground(new Color(255,255,255));
        mPanelDesenho.setOpaque(false);
        //mPanelDesenho.setPreferredSize(jLayeredPane1.getPreferredSize());
        
        //jPanelDesenhoTop.add(mPanelDesenho);

        Dimension dTela = Toolkit.getDefaultToolkit().getScreenSize();
        
        //jXMapKit1.setLocation((dTela.width - getWidth())/2,(dTela.height - getHeight())/2);
        jXMapKit1.setDefaultProvider(DefaultProviders.OpenStreetMaps);
        jXMapKit1.setAddressLocation(new GeoPosition(-15, -46, -48, -47, -55, -45));
        jXMapKit1.setVisible(true);
        jXMapKit1.setSize(400, 400);
        jXMapKit1.setZoom(11);
        //jXMapKit1.setPreferredSize(mPanelDesenho.getPreferredSize());
        jLayeredPane1.add(jXMapKit1, new Integer(0), 0);
        jLayeredPane1.add(mPanelDesenho, new Integer(1), 1);
        mPanelDesenho.setMapa(jXMapKit1.getMainMap());
        
        //       this.jScrollPaneTopologia.setViewportView(jPanelDesenhoTop);
        //arvore de metricas
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Métricas");
        //PB
        DefaultMutableTreeNode pb = new DefaultMutableTreeNode("Probabilidade de Bloqueio");
        DefaultMutableTreeNode pbGeral = new DefaultMutableTreeNode("Probabilidade de Bloqueio Geral");
        DefaultMutableTreeNode pbBack = new DefaultMutableTreeNode("PB por Ausência de Backup");
        DefaultMutableTreeNode pbPar = new DefaultMutableTreeNode("PB por Par(Origem, Destino)");
        //Utilizacao
        DefaultMutableTreeNode util = new DefaultMutableTreeNode("Utilização da Rede");
        DefaultMutableTreeNode utilGeral = new DefaultMutableTreeNode("Utilização Geral");
        DefaultMutableTreeNode utilE = new DefaultMutableTreeNode("Utilização por Link");
        DefaultMutableTreeNode utilW = new DefaultMutableTreeNode("Utilização por Comprimento de Onda");
        //restaurabilidade
        DefaultMutableTreeNode rest = new DefaultMutableTreeNode("Restaurabilidade");
        DefaultMutableTreeNode restaurabilidade = new DefaultMutableTreeNode("Restaurabilidade");
        //tamanho da conexao
        DefaultMutableTreeNode tam = new DefaultMutableTreeNode("Tamanho Médio(TM) das Requisições");
        DefaultMutableTreeNode tamA = new DefaultMutableTreeNode("TM das Requisições Atendidas");
        DefaultMutableTreeNode tamB = new DefaultMutableTreeNode("TM das Requisições Bloqueadas");
        //Link
        DefaultMutableTreeNode link = new DefaultMutableTreeNode("Link");
        DefaultMutableTreeNode nFalEnl = new DefaultMutableTreeNode("Número de Falhas por Link");
        DefaultMutableTreeNode nRotasEnl = new DefaultMutableTreeNode("Número de Rotas por Link");
        DefaultMutableTreeNode utilE2 = new DefaultMutableTreeNode("Utilização por Link");
        //par
        DefaultMutableTreeNode par = new DefaultMutableTreeNode("Par(Origem, Destino)");
        DefaultMutableTreeNode nReqPar = new DefaultMutableTreeNode("Número de Requisições por Par");
        DefaultMutableTreeNode pbPar2 = new DefaultMutableTreeNode("Probabilidade de Bloqueio por Par");
        
        treeModel = new DefaultTreeModel(root);
        this.jTreeMetricas.setModel(treeModel);
        //PB
        treeModel.insertNodeInto(pb, root, 0);
        treeModel.insertNodeInto(pbGeral, pb, 0);
        treeModel.insertNodeInto(pbBack, pb, 1);
        treeModel.insertNodeInto(pbPar, pb, 2);
        //Utilizacao
        treeModel.insertNodeInto(util, root, 1);
        treeModel.insertNodeInto(utilGeral, util, 0);
        treeModel.insertNodeInto(utilE, util, 1);
        treeModel.insertNodeInto(utilW, util, 2);
        //Restaurabilidade
        treeModel.insertNodeInto(rest, root, 2);
        treeModel.insertNodeInto(restaurabilidade, rest, 0);
        //tamanho conexao
        treeModel.insertNodeInto(tam, root, 3);
        treeModel.insertNodeInto(tamA, tam, 0);
        treeModel.insertNodeInto(tamB, tam, 1);
        //Link
        treeModel.insertNodeInto(link, root, 4);
        treeModel.insertNodeInto(utilE2, link, 0);
        treeModel.insertNodeInto(nFalEnl, link, 1);
        treeModel.insertNodeInto(nRotasEnl, link, 2);
        //Par
        treeModel.insertNodeInto(par, root, 5);
        treeModel.insertNodeInto(pbPar2, par, 0);
        treeModel.insertNodeInto(nReqPar, par, 1);
        
        jTreeMetricas.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
        
        this.jScrollPaneMetricas.setViewportView(this.jTreeMetricas);
        
        this.jScrollPaneTrafegoPar.setViewportView(null); //não mostrar tabela
        //sobrevivência
        this.protecao = new String[] { "Two Step", "Two Step com backtracking" };
        this.restauracao = new String[]  { "Restauração Simples", "Active Restoration" };
        this.adaptive = new String[] { "Adaptative" };
        //Estrategia conversão
        this.estrategiasPosConversoresEsparsa = new String[] { "Manual" };
        this.estrategiasPosConversoresParcial = new String[] { "Manual", "Total Outorsing Traffic",  };
        this.estrategiasPosConversoresEsparsaParcial = new String[] {"First Load Priority", "Manual"};
        //nivel de confiança
        SpinnerNumberModel sm = new SpinnerNumberModel();
        sm.setValue(0.95);
        sm.setStepSize(0.1);
        jSpinnerNivelConfianca.setModel(sm);
        this.fileMamegement = new FileManagement(simTmpUrl);
        //this.jPanelGraf.setLayout(new GridLayout());
        jScrollPaneGraf.setViewportView(jPanelGraf);

        relatorios = new Relatorios();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupArqtConversao;
    private javax.swing.ButtonGroup buttonGroupSobrevivencia;
    private javax.swing.ButtonGroup buttonGroupTabGraf;
    private javax.swing.ButtonGroup buttonGroupTipoTrafego;
    private javax.swing.ButtonGroup buttonGroupTrafNaoUnirforme;
    private javax.swing.JButton jBLimparHistorico;
    private javax.swing.JButton jBMaximizar;
    private javax.swing.JButton jButtonAdicionarSim;
    private javax.swing.JButton jButtonGerarGraficos;
    private javax.swing.JButton jButtonGerarRelatorio;
    private javax.swing.JButton jButtonIniciarAgenda;
    private javax.swing.JButton jButtonIniciarSimulacao;
    private javax.swing.JButton jButtonLimparSim;
    private javax.swing.JButton jButtonPararSimulacao;
    private javax.swing.JButton jButtonRemoveSim;
    private javax.swing.JCheckBox jCheckBoxGerarFalhas;
    private javax.swing.JCheckBox jCheckBoxSobrevivencia;
    private javax.swing.JComboBox jComboBoxAlgosWA;
    private javax.swing.JComboBox jComboBoxPosConversores;
    private javax.swing.JComboBox jComboBoxRoteamento;
    private javax.swing.JComboBox jComboBoxSobrevivencia;
    private javax.swing.JComboBox jComboBoxSwitchingType;
    private javax.swing.JLabel jLabelAlgoWA;
    private javax.swing.JLabel jLabelAlgoritmo;
    private javax.swing.JLabel jLabelArqtConversao;
    private javax.swing.JLabel jLabelCenarios;
    private javax.swing.JLabel jLabelGerTrafego;
    private javax.swing.JLabel jLabelIncremento;
    private javax.swing.JLabel jLabelIncremento1;
    private javax.swing.JLabel jLabelIncremento2;
    private javax.swing.JLabel jLabelIncremento3;
    private javax.swing.JLabel jLabelIncremento4;
    private javax.swing.JLabel jLabelIncremento5;
    private javax.swing.JLabel jLabelIntensInicial;
    private javax.swing.JLabel jLabelNivelConfianca;
    private javax.swing.JLabel jLabelNumRep;
    private javax.swing.JLabel jLabelNumReq;
    private javax.swing.JLabel jLabelPontosCarga;
    private javax.swing.JLabel jLabelPosConversores;
    private javax.swing.JLabel jLabelRoteamento;
    private javax.swing.JLabel jLabelTipoRoteamento;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenuAjuda;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuFerramentas;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JMenuItem jMenuItemSalvarComo;
    private javax.swing.JMenuItem jMenuItemSobre;
    private javax.swing.JMenuItem jMenuItemTopicosAjuda;
    private javax.swing.JMenuItem jMenuItemValidacao;
    private javax.swing.JPanel jPanelAgenda;
    private javax.swing.JPanel jPanelAgendaSimulacoes;
    private javax.swing.JPanel jPanelAlgoritmosWA;
    private javax.swing.JPanel jPanelArqtConversao;
    private javax.swing.JPanel jPanelConversores;
    private javax.swing.JPanel jPanelDesenho;
    private javax.swing.JPanel jPanelDesenhoTop;
    private javax.swing.JPanel jPanelDir;
    private javax.swing.JPanel jPanelEsq;
    private javax.swing.JPanel jPanelFerramentas;
    private javax.swing.JPanel jPanelGerarRelatorio;
    private javax.swing.JLayeredPane jPanelGraf;
    private javax.swing.JPanel jPanelIniciarParar;
    private javax.swing.JPanel jPanelParametrosSim;
    private javax.swing.JPanel jPanelParametrosSimulacao;
    private javax.swing.JPanel jPanelPosConversores;
    private javax.swing.JPanel jPanelRWASobrevivencia;
    private javax.swing.JPanel jPanelResultados;
    private javax.swing.JPanel jPanelRoteamento;
    private javax.swing.JPanel jPanelSobrevivencia;
    private javax.swing.JPanel jPanelTopologia;
    private javax.swing.JPanel jPanelTrafego;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JRadioButton jRadioButtonAdaptive;
    private javax.swing.JRadioButton jRadioButtonConversaoE;
    private javax.swing.JRadioButton jRadioButtonConversaoEP;
    private javax.swing.JRadioButton jRadioButtonConversaoP;
    private javax.swing.JRadioButton jRadioButtonConversaoT;
    private javax.swing.JRadioButton jRadioButtonNaoUniforme;
    private javax.swing.JRadioButton jRadioButtonProtecao;
    private javax.swing.JRadioButton jRadioButtonRestauracao;
    private javax.swing.JRadioButton jRadioButtonSemConversao;
    private javax.swing.JRadioButton jRadioButtonTNUNo;
    private javax.swing.JRadioButton jRadioButtonTNUPar;
    private javax.swing.JRadioButton jRadioButtonUniforme;
    private javax.swing.JScrollPane jScrollPaneCenarios;
    private javax.swing.JScrollPane jScrollPaneGraf;
    private javax.swing.JScrollPane jScrollPaneMetricas;
    private javax.swing.JScrollPane jScrollPaneTopologia;
    private javax.swing.JScrollPane jScrollPaneTrafego;
    private javax.swing.JScrollPane jScrollPaneTrafegoPar;
    private javax.swing.JSlider jSliderTrafficMaxHolder;
    private javax.swing.JSlider jSliderTrafficSample;
    private javax.swing.JSpinner jSpinnerNivelConfianca;
    private javax.swing.JTabbedPane jTabbedPaneTelas;
    private javax.swing.JTable jTableTrafegoPar;
    private javax.swing.JTextArea jTextAreaCenarios;
    private javax.swing.JTextArea jTextAreaTrafego;
    private javax.swing.JTextField jTextFieldHurstMax;
    private javax.swing.JTextField jTextFieldHurstMin;
    private javax.swing.JTextField jTextFieldIncremento;
    private javax.swing.JTextField jTextFieldNumRep;
    private javax.swing.JTextField jTextFieldNumReq;
    private javax.swing.JTextField jTextFieldPontosCarga;
    private javax.swing.JTextField jTextFieldintensInicial;
    private javax.swing.JToggleButton jToggleButtonDelete;
    private javax.swing.JToggleButton jToggleButtonGraf;
    private javax.swing.JToggleButton jToggleButtonLink;
    private javax.swing.JToggleButton jToggleButtonMap;
    private javax.swing.JToggleButton jToggleButtonMapActive;
    private javax.swing.JToggleButton jToggleButtonMapLock;
    private javax.swing.JToggleButton jToggleButtonMover;
    private javax.swing.JToggleButton jToggleButtonNo;
    private javax.swing.JToggleButton jToggleButtonTab;
    private javax.swing.JToggleButton jToggleButtonTopology1;
    private javax.swing.JToggleButton jToggleButtonTopology2;
    private javax.swing.JToggleButton jToggleButtonTopology3;
    private javax.swing.JToggleButton jToggleButtonTopology4;
    private javax.swing.JTree jTreeMetricas;
    // End of variables declaration//GEN-END:variables
    private Messages messages;
    private MousePanel mPanelDesenho;
    private PropriedadesNo pNo;
    private PropriedadesLink pLink;
    private PropriedadesTopologia pTopologia;
    private Vector<Pair> listaPares;
    private FileManagement fileMamegement;
    private SimulationManagement management;
    private String[] protecao;
    private String[] restauracao;
    private String[] adaptive;
    private String[] estrategiasPosConversoresEsparsa;
    private String[] estrategiasPosConversoresParcial;
    private String[] estrategiasPosConversoresEsparsaParcial;
    private DefaultTreeModel treeModel;
    private String wAssingAlgo;
    private Vector<Vector<Measurements>> measurements;
    private JanelaValidacao janelaValidacao;
    private final String simTmpUrl="SimTemp";
    private Relatorios relatorios;
    private JXMapKit jXMapKit1 = new JXMapKit();

    public int chartPos = 0;
}